//
// This is a generated file, do not edit!
// Generated by R.swift, see https://github.com/mac-cain13/R.swift
//

import Foundation
import Rswift
import UIKit

/// This `R` struct is generated and contains references to static resources.
struct R: Rswift.Validatable {
  fileprivate static let applicationLocale = hostingBundle.preferredLocalizations.first.flatMap { Locale(identifier: $0) } ?? Locale.current
  fileprivate static let hostingBundle = Bundle(for: R.Class.self)

  /// Find first language and bundle for which the table exists
  fileprivate static func localeBundle(tableName: String, preferredLanguages: [String]) -> (Foundation.Locale, Foundation.Bundle)? {
    // Filter preferredLanguages to localizations, use first locale
    var languages = preferredLanguages
      .map { Locale(identifier: $0) }
      .prefix(1)
      .flatMap { locale -> [String] in
        if hostingBundle.localizations.contains(locale.identifier) {
          if let language = locale.languageCode, hostingBundle.localizations.contains(language) {
            return [locale.identifier, language]
          } else {
            return [locale.identifier]
          }
        } else if let language = locale.languageCode, hostingBundle.localizations.contains(language) {
          return [language]
        } else {
          return []
        }
      }

    // If there's no languages, use development language as backstop
    if languages.isEmpty {
      if let developmentLocalization = hostingBundle.developmentLocalization {
        languages = [developmentLocalization]
      }
    } else {
      // Insert Base as second item (between locale identifier and languageCode)
      languages.insert("Base", at: 1)

      // Add development language as backstop
      if let developmentLocalization = hostingBundle.developmentLocalization {
        languages.append(developmentLocalization)
      }
    }

    // Find first language for which table exists
    // Note: key might not exist in chosen language (in that case, key will be shown)
    for language in languages {
      if let lproj = hostingBundle.url(forResource: language, withExtension: "lproj"),
         let lbundle = Bundle(url: lproj)
      {
        let strings = lbundle.url(forResource: tableName, withExtension: "strings")
        let stringsdict = lbundle.url(forResource: tableName, withExtension: "stringsdict")

        if strings != nil || stringsdict != nil {
          return (Locale(identifier: language), lbundle)
        }
      }
    }

    // If table is available in main bundle, don't look for localized resources
    let strings = hostingBundle.url(forResource: tableName, withExtension: "strings", subdirectory: nil, localization: nil)
    let stringsdict = hostingBundle.url(forResource: tableName, withExtension: "stringsdict", subdirectory: nil, localization: nil)

    if strings != nil || stringsdict != nil {
      return (applicationLocale, hostingBundle)
    }

    // If table is not found for requested languages, key will be shown
    return nil
  }

  /// Load string from Info.plist file
  fileprivate static func infoPlistString(path: [String], key: String) -> String? {
    var dict = hostingBundle.infoDictionary
    for step in path {
      guard let obj = dict?[step] as? [String: Any] else { return nil }
      dict = obj
    }
    return dict?[key] as? String
  }

  static func validate() throws {
    try font.validate()
    try intern.validate()
  }

  #if os(iOS) || os(tvOS)
  /// This `R.storyboard` struct is generated, and contains static references to 2 storyboards.
  struct storyboard {
    /// Storyboard `LaunchScreen`.
    static let launchScreen = _R.storyboard.launchScreen()
    /// Storyboard `Main`.
    static let main = _R.storyboard.main()

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "LaunchScreen", bundle: ...)`
    static func launchScreen(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.launchScreen)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "Main", bundle: ...)`
    static func main(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.main)
    }
    #endif

    fileprivate init() {}
  }
  #endif

  /// This `R.color` struct is generated, and contains static references to 24 colors.
  struct color {
    /// Color `#4e4e4e`.
    static let e4e4e = Rswift.ColorResource(bundle: R.hostingBundle, name: "#4e4e4e")
    /// Color `#9fa0a0`.
    static let fa0a0 = Rswift.ColorResource(bundle: R.hostingBundle, name: "#9fa0a0")
    /// Color `#b6b6b6`.
    static let b6b6b6 = Rswift.ColorResource(bundle: R.hostingBundle, name: "#b6b6b6")
    /// Color `#c5c5c5`.
    static let c5c5c5 = Rswift.ColorResource(bundle: R.hostingBundle, name: "#c5c5c5")
    /// Color `Color-purple`.
    static let colorPurple = Rswift.ColorResource(bundle: R.hostingBundle, name: "Color-purple")
    /// Color `ColorTextBlack`.
    static let colorTextBlack = Rswift.ColorResource(bundle: R.hostingBundle, name: "ColorTextBlack")
    /// Color `LineColor6CA`.
    static let lineColor6CA = Rswift.ColorResource(bundle: R.hostingBundle, name: "LineColor6CA")
    /// Color `LineColorE8E8`.
    static let lineColorE8E8 = Rswift.ColorResource(bundle: R.hostingBundle, name: "LineColorE8E8")
    /// Color `StateColor1FF`.
    static let stateColor1FF = Rswift.ColorResource(bundle: R.hostingBundle, name: "StateColor1FF")
    /// Color `TextColor6767`.
    static let textColor6767 = Rswift.ColorResource(bundle: R.hostingBundle, name: "TextColor6767")
    /// Color `TextColor727`.
    static let textColor727 = Rswift.ColorResource(bundle: R.hostingBundle, name: "TextColor727")
    /// Color `color-4dbd94`.
    static let color4dbd94 = Rswift.ColorResource(bundle: R.hostingBundle, name: "color-4dbd94")
    /// Color `color-background-view`.
    static let colorBackgroundView = Rswift.ColorResource(bundle: R.hostingBundle, name: "color-background-view")
    /// Color `color-blue-btn`.
    static let colorBlueBtn = Rswift.ColorResource(bundle: R.hostingBundle, name: "color-blue-btn")
    /// Color `color-cfcfcf`.
    static let colorCfcfcf = Rswift.ColorResource(bundle: R.hostingBundle, name: "color-cfcfcf")
    /// Color `color-disable-btn`.
    static let colorDisableBtn = Rswift.ColorResource(bundle: R.hostingBundle, name: "color-disable-btn")
    /// Color `color-error-bg`.
    static let colorErrorBg = Rswift.ColorResource(bundle: R.hostingBundle, name: "color-error-bg")
    /// Color `color-error-text`.
    static let colorErrorText = Rswift.ColorResource(bundle: R.hostingBundle, name: "color-error-text")
    /// Color `color-light-gray`.
    static let colorLightGray = Rswift.ColorResource(bundle: R.hostingBundle, name: "color-light-gray")
    /// Color `color-light-yellow`.
    static let colorLightYellow = Rswift.ColorResource(bundle: R.hostingBundle, name: "color-light-yellow")
    /// Color `color-navy-text`.
    static let colorNavyText = Rswift.ColorResource(bundle: R.hostingBundle, name: "color-navy-text")
    /// Color `color-orange-border`.
    static let colorOrangeBorder = Rswift.ColorResource(bundle: R.hostingBundle, name: "color-orange-border")
    /// Color `color-seperator`.
    static let colorSeperator = Rswift.ColorResource(bundle: R.hostingBundle, name: "color-seperator")
    /// Color `color-yellow-bg`.
    static let colorYellowBg = Rswift.ColorResource(bundle: R.hostingBundle, name: "color-yellow-bg")

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "#4e4e4e", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func e4e4e(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.e4e4e, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "#9fa0a0", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func fa0a0(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.fa0a0, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "#b6b6b6", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func b6b6b6(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.b6b6b6, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "#c5c5c5", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func c5c5c5(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.c5c5c5, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "Color-purple", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func colorPurple(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.colorPurple, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "ColorTextBlack", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func colorTextBlack(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.colorTextBlack, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "LineColor6CA", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func lineColor6CA(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.lineColor6CA, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "LineColorE8E8", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func lineColorE8E8(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.lineColorE8E8, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "StateColor1FF", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func stateColor1FF(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.stateColor1FF, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "TextColor6767", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func textColor6767(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.textColor6767, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "TextColor727", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func textColor727(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.textColor727, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "color-4dbd94", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func color4dbd94(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.color4dbd94, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "color-background-view", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func colorBackgroundView(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.colorBackgroundView, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "color-blue-btn", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func colorBlueBtn(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.colorBlueBtn, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "color-cfcfcf", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func colorCfcfcf(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.colorCfcfcf, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "color-disable-btn", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func colorDisableBtn(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.colorDisableBtn, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "color-error-bg", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func colorErrorBg(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.colorErrorBg, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "color-error-text", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func colorErrorText(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.colorErrorText, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "color-light-gray", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func colorLightGray(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.colorLightGray, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "color-light-yellow", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func colorLightYellow(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.colorLightYellow, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "color-navy-text", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func colorNavyText(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.colorNavyText, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "color-orange-border", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func colorOrangeBorder(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.colorOrangeBorder, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "color-seperator", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func colorSeperator(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.colorSeperator, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "color-yellow-bg", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func colorYellowBg(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.colorYellowBg, compatibleWith: traitCollection)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "#4e4e4e", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func e4e4e(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.e4e4e.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "#9fa0a0", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func fa0a0(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.fa0a0.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "#b6b6b6", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func b6b6b6(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.b6b6b6.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "#c5c5c5", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func c5c5c5(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.c5c5c5.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "Color-purple", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func colorPurple(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.colorPurple.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "ColorTextBlack", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func colorTextBlack(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.colorTextBlack.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "LineColor6CA", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func lineColor6CA(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.lineColor6CA.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "LineColorE8E8", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func lineColorE8E8(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.lineColorE8E8.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "StateColor1FF", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func stateColor1FF(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.stateColor1FF.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "TextColor6767", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func textColor6767(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.textColor6767.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "TextColor727", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func textColor727(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.textColor727.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "color-4dbd94", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func color4dbd94(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.color4dbd94.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "color-background-view", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func colorBackgroundView(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.colorBackgroundView.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "color-blue-btn", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func colorBlueBtn(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.colorBlueBtn.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "color-cfcfcf", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func colorCfcfcf(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.colorCfcfcf.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "color-disable-btn", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func colorDisableBtn(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.colorDisableBtn.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "color-error-bg", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func colorErrorBg(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.colorErrorBg.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "color-error-text", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func colorErrorText(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.colorErrorText.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "color-light-gray", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func colorLightGray(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.colorLightGray.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "color-light-yellow", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func colorLightYellow(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.colorLightYellow.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "color-navy-text", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func colorNavyText(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.colorNavyText.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "color-orange-border", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func colorOrangeBorder(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.colorOrangeBorder.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "color-seperator", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func colorSeperator(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.colorSeperator.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "color-yellow-bg", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func colorYellowBg(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.colorYellowBg.name)
    }
    #endif

    fileprivate init() {}
  }

  /// This `R.entitlements` struct is generated, and contains static references to 2 properties.
  struct entitlements {
    static let apsEnvironment = infoPlistString(path: [], key: "aps-environment") ?? "development"

    struct comAppleDeveloperApplesignin {
      static let `default` = infoPlistString(path: ["com.apple.developer.applesignin"], key: "Default") ?? "Default"

      fileprivate init() {}
    }

    fileprivate init() {}
  }

  /// This `R.file` struct is generated, and contains static references to 4 files.
  struct file {
    /// Resource file `AppleGothic.ttf`.
    static let appleGothicTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "AppleGothic", pathExtension: "ttf")
    /// Resource file `GoogleService-Info.plist`.
    static let googleServiceInfoPlist = Rswift.FileResource(bundle: R.hostingBundle, name: "GoogleService-Info", pathExtension: "plist")
    /// Resource file `NanumSquareOTFR.ttf`.
    static let nanumSquareOTFRTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "NanumSquareOTFR", pathExtension: "ttf")
    /// Resource file `NanumSquareRoundEB.ttf`.
    static let nanumSquareRoundEBTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "NanumSquareRoundEB", pathExtension: "ttf")

    /// `bundle.url(forResource: "AppleGothic", withExtension: "ttf")`
    static func appleGothicTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.appleGothicTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "GoogleService-Info", withExtension: "plist")`
    static func googleServiceInfoPlist(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.googleServiceInfoPlist
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "NanumSquareOTFR", withExtension: "ttf")`
    static func nanumSquareOTFRTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.nanumSquareOTFRTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "NanumSquareRoundEB", withExtension: "ttf")`
    static func nanumSquareRoundEBTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.nanumSquareRoundEBTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    fileprivate init() {}
  }

  /// This `R.font` struct is generated, and contains static references to 3 fonts.
  struct font: Rswift.Validatable {
    /// Font `AppleGothic`.
    static let appleGothic = Rswift.FontResource(fontName: "AppleGothic")
    /// Font `NanumSquareOTFR00`.
    static let nanumSquareOTFR00 = Rswift.FontResource(fontName: "NanumSquareOTFR00")
    /// Font `NanumSquareRoundEB`.
    static let nanumSquareRoundEB = Rswift.FontResource(fontName: "NanumSquareRoundEB")

    /// `UIFont(name: "AppleGothic", size: ...)`
    static func appleGothic(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: appleGothic, size: size)
    }

    /// `UIFont(name: "NanumSquareOTFR00", size: ...)`
    static func nanumSquareOTFR00(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: nanumSquareOTFR00, size: size)
    }

    /// `UIFont(name: "NanumSquareRoundEB", size: ...)`
    static func nanumSquareRoundEB(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: nanumSquareRoundEB, size: size)
    }

    static func validate() throws {
      if R.font.appleGothic(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'AppleGothic' could not be loaded, is 'AppleGothic.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.nanumSquareOTFR00(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'NanumSquareOTFR00' could not be loaded, is 'NanumSquareOTFR.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.nanumSquareRoundEB(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'NanumSquareRoundEB' could not be loaded, is 'NanumSquareRoundEB.ttf' added to the UIAppFonts array in this targets Info.plist?") }
    }

    fileprivate init() {}
  }

  /// This `R.image` struct is generated, and contains static references to 11 images.
  struct image {
    /// Image `Clear`.
    static let clear = Rswift.ImageResource(bundle: R.hostingBundle, name: "Clear")
    /// Image `bg_backgroundImage`.
    static let bg_backgroundImage = Rswift.ImageResource(bundle: R.hostingBundle, name: "bg_backgroundImage")
    /// Image `home`.
    static let home = Rswift.ImageResource(bundle: R.hostingBundle, name: "home")
    /// Image `ic_apple`.
    static let ic_apple = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_apple")
    /// Image `ic_back`.
    static let ic_back = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_back")
    /// Image `ic_checked_autologin`.
    static let ic_checked_autologin = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_checked_autologin")
    /// Image `ic_fb`.
    static let ic_fb = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_fb")
    /// Image `ic_kakao`.
    static let ic_kakao = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_kakao")
    /// Image `ic_login_top`.
    static let ic_login_top = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_login_top")
    /// Image `ic_naver`.
    static let ic_naver = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_naver")
    /// Image `ic_uncheck_autologin`.
    static let ic_uncheck_autologin = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_uncheck_autologin")

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Clear", bundle: ..., traitCollection: ...)`
    static func clear(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.clear, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "bg_backgroundImage", bundle: ..., traitCollection: ...)`
    static func bg_backgroundImage(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.bg_backgroundImage, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "home", bundle: ..., traitCollection: ...)`
    static func home(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.home, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_apple", bundle: ..., traitCollection: ...)`
    static func ic_apple(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_apple, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_back", bundle: ..., traitCollection: ...)`
    static func ic_back(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_back, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_checked_autologin", bundle: ..., traitCollection: ...)`
    static func ic_checked_autologin(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_checked_autologin, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_fb", bundle: ..., traitCollection: ...)`
    static func ic_fb(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_fb, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_kakao", bundle: ..., traitCollection: ...)`
    static func ic_kakao(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_kakao, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_login_top", bundle: ..., traitCollection: ...)`
    static func ic_login_top(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_login_top, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_naver", bundle: ..., traitCollection: ...)`
    static func ic_naver(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_naver, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_uncheck_autologin", bundle: ..., traitCollection: ...)`
    static func ic_uncheck_autologin(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_uncheck_autologin, compatibleWith: traitCollection)
    }
    #endif

    fileprivate init() {}
  }

  /// This `R.nib` struct is generated, and contains static references to 3 nibs.
  struct nib {
    /// Nib `AuthenticationViewController`.
    static let authenticationViewController = _R.nib._AuthenticationViewController()
    /// Nib `SignInViewController`.
    static let signInViewController = _R.nib._SignInViewController()
    /// Nib `TextInputView`.
    static let textInputView = _R.nib._TextInputView()

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "AuthenticationViewController", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.authenticationViewController) instead")
    static func authenticationViewController(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.authenticationViewController)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "SignInViewController", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.signInViewController) instead")
    static func signInViewController(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.signInViewController)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "TextInputView", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.textInputView) instead")
    static func textInputView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.textInputView)
    }
    #endif

    static func authenticationViewController(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.authenticationViewController.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    static func signInViewController(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.signInViewController.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    static func textInputView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.textInputView.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    fileprivate init() {}
  }

  fileprivate struct intern: Rswift.Validatable {
    fileprivate static func validate() throws {
      try _R.validate()
    }

    fileprivate init() {}
  }

  fileprivate class Class {}

  fileprivate init() {}
}

struct _R: Rswift.Validatable {
  static func validate() throws {
    #if os(iOS) || os(tvOS)
    try nib.validate()
    #endif
    #if os(iOS) || os(tvOS)
    try storyboard.validate()
    #endif
  }

  #if os(iOS) || os(tvOS)
  struct nib: Rswift.Validatable {
    static func validate() throws {
      try _SignInViewController.validate()
    }

    struct _AuthenticationViewController: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "AuthenticationViewController"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      fileprivate init() {}
    }

    struct _SignInViewController: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "SignInViewController"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      static func validate() throws {
        if UIKit.UIImage(named: "ic_apple", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_apple' is used in nib 'SignInViewController', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_checked_autologin", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_checked_autologin' is used in nib 'SignInViewController', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_fb", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_fb' is used in nib 'SignInViewController', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_kakao", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_kakao' is used in nib 'SignInViewController', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_login_top", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_login_top' is used in nib 'SignInViewController', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_naver", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_naver' is used in nib 'SignInViewController', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_uncheck_autologin", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_uncheck_autologin' is used in nib 'SignInViewController', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
          if UIKit.UIColor(named: "#4e4e4e", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named '#4e4e4e' is used in nib 'SignInViewController', but couldn't be loaded.") }
          if UIKit.UIColor(named: "#b6b6b6", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named '#b6b6b6' is used in nib 'SignInViewController', but couldn't be loaded.") }
          if UIKit.UIColor(named: "#c5c5c5", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named '#c5c5c5' is used in nib 'SignInViewController', but couldn't be loaded.") }
          if UIKit.UIColor(named: "color-error-text", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'color-error-text' is used in nib 'SignInViewController', but couldn't be loaded.") }
        }
      }

      fileprivate init() {}
    }

    struct _TextInputView: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "TextInputView"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      fileprivate init() {}
    }

    fileprivate init() {}
  }
  #endif

  #if os(iOS) || os(tvOS)
  struct storyboard: Rswift.Validatable {
    static func validate() throws {
      #if os(iOS) || os(tvOS)
      try launchScreen.validate()
      #endif
      #if os(iOS) || os(tvOS)
      try main.validate()
      #endif
    }

    #if os(iOS) || os(tvOS)
    struct launchScreen: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = UIKit.UIViewController

      let bundle = R.hostingBundle
      let launchScreen = StoryboardViewControllerResource<UIKit.UIViewController>(identifier: "LaunchScreen")
      let name = "LaunchScreen"

      func launchScreen(_: Void = ()) -> UIKit.UIViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: launchScreen)
      }

      static func validate() throws {
        if UIKit.UIImage(named: "bg_backgroundImage", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'bg_backgroundImage' is used in storyboard 'LaunchScreen', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
        if _R.storyboard.launchScreen().launchScreen() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'launchScreen' could not be loaded from storyboard 'LaunchScreen' as 'UIKit.UIViewController'.") }
      }

      fileprivate init() {}
    }
    #endif

    #if os(iOS) || os(tvOS)
    struct main: Rswift.StoryboardResourceType, Rswift.Validatable {
      let arWebContentViewController = StoryboardViewControllerResource<ARWebContentViewController>(identifier: "ARWebContentViewController")
      let bundle = R.hostingBundle
      let name = "Main"

      func arWebContentViewController(_: Void = ()) -> ARWebContentViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: arWebContentViewController)
      }

      static func validate() throws {
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
        if _R.storyboard.main().arWebContentViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'arWebContentViewController' could not be loaded from storyboard 'Main' as 'ARWebContentViewController'.") }
      }

      fileprivate init() {}
    }
    #endif

    fileprivate init() {}
  }
  #endif

  fileprivate init() {}
}
